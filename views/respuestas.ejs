<%- include('includes/header.ejs', {username: username}) %>
<div class="container m-5 p-3">

    <ol>
    <li>Internet es una red global de redes de computadoras interconectadas, mientras que la World Wide Web es un sistema de información que permite el acceso a recursos de Internet mediante documentos vinculados entre sí.</li>
  
    <li>Las partes de un URL son el protocolo, el dominio, el puerto, la ruta, la cadena de consulta y el fragmento.</li>
  
    <li>GET se utiliza para recuperar datos, HEAD para obtener encabezados, POST para enviar datos para ser procesados, PUT para actualizar recursos, PATCH para modificar parcialmente un recurso y DELETE para eliminar un recurso.</li>
  
    <li>Se debe utilizar el método POST al enviar un formulario HTML, ya que envía los datos de forma segura en el cuerpo de la solicitud HTTP.</li>
  
    <li>Se utiliza el método GET cuando se accede a una página a través de un URL en un navegador web.</li>
  
    <li>El código 200 significa "OK". No ocurrió ningún error, la solicitud fue exitosa y se devolvió el recurso solicitado correctamente.</li>
  
    <li>Sí, es responsabilidad del desarrollador corregir un error 404, ya que indica que el recurso solicitado no fue encontrado en el servidor.</li>
  
    <li>Sí, es responsabilidad del desarrollador corregir un error 500, ya que indica un error interno del servidor.</li>
  
    <li>Significa que el atributo ya no se recomienda utilizar y puede ser eliminado en futuras versiones de HTML. Algunos elementos desaprobados de HTML 4 en HTML5 incluyen &lt;font&gt;, &lt;center&gt;, y &lt;strike&gt;.</li>
  
    <li>Algunas diferencias principales son la introducción de nuevas etiquetas semánticas, soporte mejorado para multimedia, atributos desaprobados, y API de JavaScript mejorada en HTML5.</li>
  
    <li>Los componentes de estructura de una tabla incluyen filas (&lt;tr&gt;), celdas de encabezado (&lt;th&gt;) y celdas de datos (&lt;td&gt;). Los componentes de estilo pueden incluir propiedades como bordes, fondos y márgenes.</li>
  
    <li>Los principales controles de una forma HTML5 incluyen &lt;input&gt;, &lt;textarea&gt;, &lt;select&gt;, &lt;button&gt;, &lt;label&gt;, entre otros.</li>
  
    <li>Puedes verificar el soporte de HTML5 en tu navegador utilizando el sitio web http://html5test.com/.</li>
  
    <li>El ciclo de vida de los sistemas de información incluye etapas como planificación, análisis, diseño, implementación, pruebas, despliegue, mantenimiento y eventual retirada.</li>
  
    <li>El ciclo de desarrollo de sistemas de información varía según la metodología utilizada, pero generalmente incluye etapas como definición de requerimientos, diseño, desarrollo, pruebas, implementación y mantenimiento.</li>
  
    <li>El uso de !important en CSS debe evitarse en la medida de lo posible, ya que puede causar problemas de mantenimiento y dificultar la modificación del estilo en el futuro. Se debe priorizar el uso de selectores específicos y la cascada natural de CSS.</li>
  
    <li>La imagen de fondo de una página HTML debe elegirse con cuidado para asegurarse de que no distraiga demasiado del contenido principal, que se vea bien en diferentes dispositivos y que tenga un tamaño de archivo razonable para no afectar negativamente la velocidad de carga de la página.</li>
  
    <li>La elección de unidades depende del contexto y del diseño deseado. % es útil para diseños fluidos y adaptables, px es más preciso y pt se utiliza comúnmente para texto impreso. Es importante considerar la accesibilidad y la experiencia del usuario al elegir unidades.</li>
  
    <li>Una versión minimizada del CSS reduce el tamaño del archivo CSS al eliminar comentarios, espacios en blanco y otros caracteres no esenciales, lo que resulta en tiempos de carga más rápidos para los usuarios.</li>
  
    <li>Java es un lenguaje de programación orientado a objetos utilizado principalmente para aplicaciones de servidor y aplicaciones de escritorio, mientras que JavaScript es un lenguaje de secuencias de comandos utilizado principalmente para la programación del lado del cliente en páginas web. Ambos tienen sintaxis similares a C y comparten algunas características, pero son distintos en cuanto a su propósito y entorno de ejecución.</li>
  
    <li>Algunos métodos del objeto Date incluyen getDate(), getMonth(), getFullYear(), getHours(), getMinutes(), getSeconds(), getTime(), toLocaleString(), y toString().</li>
  
    <li>Algunos métodos de los arreglos incluyen push(), pop(), shift(), unshift(), splice(), slice(), concat(), join(), indexOf(), y forEach().</li>
  
    <li>Una variable con alcance local dentro de una función se declara utilizando la palabra clave var, let o const dentro del cuerpo de la función.</li>
  
    <li>Utilizar variables globales dentro de funciones puede causar problemas de colisión de nombres, dificultar la depuración y hacer que el código sea menos modular y reutilizable. Se recomienda evitar el uso excesivo de variables globales y preferir el encapsulamiento de variables dentro de funciones cuando sea posible.</li>
  
    <li>Material Design es un sistema de diseño desarrollado por Google que se centra en la usabilidad, la accesibilidad y la estética. Se caracteriza por el uso de sombras, profundidad, movimiento y colores vibrantes para crear una experiencia de usuario coherente en diferentes plataformas y dispositivos.</li>
  
    <li>Es una buena práctica utilizar JavaScript para validar los inputs de las formas antes de enviar los datos al servidor porque proporciona una experiencia de usuario más rápida y receptiva al validar los datos en el cliente antes de enviarlos al servidor, lo que puede reducir el número de solicitudes innecesarias al servidor y mejorar la eficiencia del sistema.</li>
  
    <li>Las validaciones hechas con JavaScript en el cliente pueden ser eludidas fácilmente por un usuario malintencionado mediante la manipulación directa del código JavaScript o la desactivación del JavaScript en el navegador. Por lo tanto, es importante realizar validaciones adicionales en el servidor para garantizar la seguridad de los datos.</li>
  
    <li>Aunque las validaciones de JavaScript en el cliente pueden ser eludidas, todavía son útiles para mejorar la experiencia del usuario y reducir la carga en el servidor al validar los datos antes de enviarlos. Sin embargo, es crucial complementar estas validaciones con validaciones adicionales en el servidor para garantizar la seguridad y la integridad de los datos.</li>
  
    <li>El archivo package.json es un archivo de configuración en proyectos Node.js que contiene información sobre el proyecto, sus dependencias, scripts de ejecución y más. Es esencial para gestionar y ejecutar proyectos Node.js.</li>

    <li>Pug (antes Jade): https://www.akc.org/dog-breeds/pug/ Permite una sintaxis más concisa y legible para las plantillas.
      Handlebars: https://handlebarsjs.com/ Ofrece una sintaxis similar a Mustache, pero con más funcionalidades como helpers y expresiones condicionales.
      Mustache: https://en.wikipedia.org/wiki/Moustache Es una opción ligera y rápida, ideal para proyectos pequeños donde la simplicidad es clave.</li>

    <li>El estilo MVC (Modelo-Vista-Controlador) ofrece una separación clara de responsabilidades en una aplicación, lo que facilita la organización, mantenimiento y escalabilidad del código. Esto promueve la reutilización de componentes y mejora la legibilidad del código.</li>

    <li>Una posible desventaja del MVC es que en aplicaciones complejas puede generar una cantidad considerable de archivos y capas, lo que puede resultar en una curva de aprendizaje más pronunciada para los desarrolladores nuevos en el proyecto.</li>

    <li>
      Ventajas del SQL en el modelo:
      Funciona con distintas bases de datos (flexibilidad).
      Código reutilizable (menos lío).
      Más fácil de entender y colaborar.
      Aprovecha la potencia de la base de datos (rapidez).
      Mayor seguridad.</li>

      <li>
        SQL Injection: Rápido y peligroso
        Ataque web que roba, modifica o elimina datos de tu base de datos.
        
        Lo logran inyectando código malicioso en entradas de usuario (buscar, formulario).
        
        ¡Peligroso! Protege tu app web con:
        
        Entrada Limpia: Revisa todo lo que ingresa un usuario.
        Consultas preparadas: Separa datos de la consulta, evitando inyecciones.
        Software actualizado: Mantén todo al día con parches de seguridad.
        Cortafuegos WAF: Filtro especial para bloquear ataques.
        Capacitación: Educa a tu equipo para estar alerta.</li>
  </ol>
</div>
<%- include('includes/footer.ejs') %>